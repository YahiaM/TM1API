
# This process will create a static subset based on a list of supplied elements


### Constants ###

cProcess = GetProcessName();
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pDimension   : ' | pDimension );
  AsciiOutput( sDebugFile, '            pSubset      : ' | pSubset );
  AsciiOutput( sDebugFile, '            pElements    : ' | pElements );
  AsciiOutput( sDebugFile, '            pDelimiter   : ' | pDelimiter );

EndIf;


### Validate Parameters ###

nErrors = 0;

# Validate dimension
If( Trim( pDimension ) @= '' );
	nErrors = 1;
	sMessage = 'No dimension specified';
	If( pDebug >= 1 );
		AsciiOutput( sDebugFile, sMessage );
	EndIf;
	ItemReject( sMessage );
EndIf;
If( DimensionExists( pDimension ) = 0 );
	nErrors = 1;
	sMessage = 'Invalid dimension: ' | pDimension;
	If( pDebug >= 1 );
		AsciiOutput( sDebugFile, sMessage );
	EndIf;
	ItemReject( sMessage );
EndIf;

# Validate subset
If( Trim( pSubset ) @= '' );
	nErrors = 1;
	sMessage = 'No subset specified';
	If( pDebug >= 1 );
		AsciiOutput( sDebugFile, sMessage );
	EndIf;
	ItemReject( sMessage );
EndIf;

# Validate elements
If( Trim( pElements ) @= '' );
	nErrors = 1;
	sMessage = 'No elements specified';
	If( pDebug >= 1 );
		AsciiOutput( sDebugFile, sMessage );
	EndIf;
	ItemReject( sMessage );
EndIf;

# Validate delimiter
If( pDelimiter @= '' );
	pDelimiter = '&';
EndIf;

# Validate add to subset
If( pAddToSubset <> 0 & pAddToSubset <> 1 );
	nErrors = 1;
	sMessage = 'Invalid value for pAddToSubset: ' | NumberToString( pAddToSubset ) | '. Valid values are 0 and 1';
	If( pDebug >= 1 );
		AsciiOutput( sDebugFile, sMessage );
	EndIf;
	ItemReject( sMessage );
EndIf;


### Prepare subset ###

If( SubsetExists( pDimension, pSubset ) = 1 );
  If( pAddtoSubset <> 1 );
    If( pDebug <= 1 );
      SubsetDeleteAllElements( pDimension, pSubset );
    EndIf;
    nSubsetSize = 0;
  Else;
    nSubsetSize = SubsetGetSize( pDimension, pSubset );
  EndIf;
Else;
  If( pDebug <= 1 );
    SubsetCreate( pDimension, pSubset );
  EndIf;
  nSubsetSize = 0;
EndIf;


### Insert elements ###

nSubsetIndex = 1;
sElements = pElements;
nDelimIndex = 1;

# Split filter into seperate dimensions
While( nDelimIndex <> 0 & Long( sElements ) > 0 );

  nDelimIndex = Scan( pDelimiter, sElements );
  If( nDelimIndex <> 0 );
    sElement = Trim( SubSt( sElements, 1, nDelimIndex - 1 ) );
    sElements = Trim( SubSt( sElements, nDelimIndex + Long( pDelimiter ), Long( sElements ) ) );
  Else;
    sElement = Trim( sElements );
  EndIf;

  If( DimIx( pDimension, sElement ) <> 0 );
    If( pDebug >= 1 );
      AsciiOutput( sDebugFile, 'Element: ' | sElement | ' to be added to subset.' );
    EndIf;
    If( pDebug <= 1 );
       IF(ELLEV( pDimension, sElement) > 0);
			SubsetCreatebyMDX(pSubset, '{TM1FILTERBYLEVEL({DESCENDANTS('|pDimension|'.['|sElement|']) }, 0)}');
      ELSE;
			SubsetElementInsert( pDimension, pSubset, sElement, nSubsetIndex );
      ENDIF;
    EndIf;
    nSubsetIndex = nSubsetIndex + 1;
  Else;
    AsciiOutput( sDebugFile, 'Element: ' | sElement | ' does not exist in dimension: ' | pDimension | ', skipping' );
  EndIf;
End;


### End Prolog ###
